<!--
  Run this example as follows:
  uv run collagraph examples/pyside/layout_example.cgx
 -->
<window>
  <menubar>
    <menu title="File">
      <action text="Open" />
      <action separator />
      <menu title="Sub">
        <action text="sub" />
      </menu>
    </menu>
  </menubar>
  <widget>
    <groupbox
      title="Horizontal layout"
      :layout="{'type': 'Box', 'direction': 'LeftToRight'}"
    >
      <component
        v-for="item in box"
        :is="item[0]"
        v-bind="item[1]"
        @clicked="item[1]['clicked']"
      />
    </groupbox>
    <groupbox
      title="Stacked layout"
      :layout="{'type': 'Stacked', 'current_index': index}"
    >
      <component
        v-for="item in stacked"
        :is="item[0]"
        v-bind="item[1]"
      />
    </groupbox>
    <groupbox
      title="Flow layout (custom)"
      :layout="{'type': 'flow'}"
    >
      <component
        v-for="item in flow"
        :is="item[0]"
        v-bind="item[1]"
      />
    </groupbox>
    <groupbox
      title="Grid layout"
      :layout="{'type': 'Grid', 'column_stretch': [(1, 10), (2, 20)]}"
    >
      <component
        v-for="item in grid"
        :is="item[0]"
        v-bind="item[1]"
      />
    </groupbox>
    <groupbox
      title="Form layout"
      :layout="{'type': 'Form'}"
    >
      <component
        v-for="item in form"
        :is="item[0]"
        v-bind="item[1]"
      />
    </groupbox>
    <textedit
      text="This widget takes up all the remaining space in the top-level layout."
    />
    <dialogbuttonbox>
      <button text="Select all" role="ResetRole" @clicked="select_all" />
    </dialogbuttonbox>
  </widget>
</window>

<script>
import collagraph as cg
from examples.pyside.flow_layout import FlowLayout

cg.PySideRenderer.register_layout("flow", FlowLayout)


class LayoutExample(cg.Component):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.state["index"] = self.props.get("index", 0)

        # Data to fill the box layout
        box = []
        for i in range(1, 5):
            box.append(
                (
                    "button",
                    {
                        "text": f"Button {i}",
                        "clicked": lambda _=None, x=i: self.set_index(x),
                    },
                )
            )

        # Data to fill the grid layout
        grid = []
        for i in range(1, 5):
            grid.append(("Label", {"text": f"Line {i}", "grid_index": (i, 0)}))
            grid.append(("LineEdit", {"grid_index": (i, 1)}))
        grid.append(
            (
                "TextEdit",
                {
                    "text": "This widget takes up about two thirds of the grid layout",
                    "grid_index": (1, 2, 4, 1),
                },
            )
        )

        # Data to fill the form layout
        form = []
        for i, widget in enumerate(["LineEdit", "ComboBox", "SpinBox"]):
            text = f"Line {i+1}:"
            if i == 1:
                text = "Line 2, long text:"
            form.append((widget, {"form_label": text, "form_index": i}))

        stacked = []
        for i in range(1, 5):
            stacked.append(("Label", {"text": f"Stack {i}"}))

        flow = []
        for i in range(1, 10):
            flow.append(("label", {"text": f"Flow {i}"}))

        self.box = box
        self.grid = grid
        self.form = form
        self.stacked = stacked
        self.flow = flow

    def accepted(self):
        print("accepted")  # noqa: T201

    def rejected(self):
        print("rejected")  # noqa: T201

    def select_all(self):
        print("select all")  # noqa: T201

    def clicked(self, btn):
        print("clicked:", btn)  # noqa: T201

    def set_index(self, number):
        self.state["index"] = number - 1
        print("index", self.state["index"])
</script>
